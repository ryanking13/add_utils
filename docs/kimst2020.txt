안녕하세요, 한국군사과학기술학회 이번 발표 주제는 컨테이너 기반 가상화 기술의 보안 기술동향입니다.
저는 발표를 맡은 국방과학연구소 첨단기술연구원 지능정보기술부 3팀 최경재라고 합니다.

발표 목차는 다음과 같습니다.
연구 개요, 연구 목표, 연구 내용, 그리고 결론 순으로 진행될 예정입니다.

먼저 연구 개요입니다.
연구 개요에서는 연구 내용을 소개하기에 앞서 이번 연구에서 다루는 기술을 설명하도록 하겠습니다.

먼저 가상화입니다.
가상, Virtual이라는 말은 최근 가상 현실, VR이라는 말로 많이 들어보셨을 것이라고 생각합니다.
가상 현실이 현실과 닮았지만 현실이 아닌 가짜 세계를 나타내는 말인 것처럼
컴퓨팅 측면에서의 가상화는 현실의 물리적인 컴퓨터 자원을 추상화하여,
실제로 하나의 컴퓨터인 것처럼 쓸 수 있는 가상의 컴퓨팅 환경을 구성하는 기술이라고 할 수 있습니다.
이 때 하나의 컴퓨터를 여러 개인 것처럼 동작시키거나, 여러 개의 컴퓨터를 하나인 것처럼 제공하는 것이 가능합니다.

이 가상화 기술은 우리가 4차 산업혁명을 이야기할 때 반드시 언급이 되는 클라우드 컴퓨팅의 핵심적인 기술입니다.
클라우드 컴퓨팅은 간단히 이야기하면 외부의 거대한 컴퓨팅 자원을 여러 명이 나누어 사용하는 것이고, 그러한 자원의 배분은 가상화 기술 없이는 불가능합니다.

최근에는 기업, 국가, 국방 할 것 없이 클라우드 컴퓨팅을 적극적으로 도입하고 있습니다.
삼성은 2018년에 이미 계열사 주요 시스템의 90%를 클라우드로 전환했다고 밝혔고,
대한민국 정부도 최근 발표한 디지털 뉴딜의 핵심적인 인프라로 클라우드 전면 전환을 이룰 것이라고 밝혔습니다.
국방 분야에서도 미국 국방부는 클라우드 프로젝트인 제다이(JEDI)를 마이크로소프트 클라우드 서비스를 이용해서 구축할 것이라고 밝혔으며,
대한민국 국방부도 클라우드 퍼스트 정책을 통해 주요 시스템의 60%를 3년 대에 클라우드로 전환할 것이라고 밝혔습니다.

이렇듯 클라우드 컴퓨팅 기술이 확산되면서 필연적으로 가상화 기술의 중요성도 부각되고 있습니다.

가상화 기술은 크게 두 갈래로 나뉩니다.
첫째는 가상 머신 기반 가상화이고, 둘째는 컨테이너 기반 가상화입니다.

가상 머신 기반 가상화는 하이퍼바이저를 이용해 하드웨어 자원을 가상화하는 방식을 가리킵니다.
하이퍼파이저는 하나의 호스트 시스템에서 여러 개의 게스트 OS(가상 머신)을 운용할 수 있게 해주는 소프트웨어입니다.

컴퓨터 스택에서 볼 때, 하이퍼바이저는 하드웨어 바로 위에 위치하는 경우도 있고, OS 위에 위치하는 경우도 있습니다.
윈도우즈의 Hyper-V, 리눅스의 KVM이 전자에 속하고, 우리가 많이 사용하는 소프트웨어인 VMware, Virtualbox 등이 후자에 속합니다.

두 경우에 관계없이 모두 하이퍼 바이저 위에 여러 개의 OS가 구동되는 모습을 볼 수 있고,
그러한 OS 각각을 가상머신이라고 지칭합니다.

한편, 컨테이너 기반 가상화는 여러 개의 OS를 별도로 구동하는 대신,
하나의 호스트 OS 위에서 OS가 제공하는 격리 기법을 이용하여 각각의 애플리케이션이 실행될 고유한 영역인 컨테이너를 생성하는 방식을 사용합니다.

구체적으로는 리눅스 OS 커널이 제공하는 namespace와 cgroups라는 기술을 사용하여 각 애플리케이션을 격리합니다.
간단히 설명하자면, namespace는 유저 ID, 프로세스 ID, 파일시스템 등을 분리해서 프로세스를 격리하는 기술이고,
cgroups는 CPU와 메모리 같은 하드웨어 자원을 제한하는 기술입니다.

이 두 가상화 기술의 핵심적인 차이는 결국 각 프로세스가 별도의 OS를 가지느냐, 혹은 하나의 OS를 공유하느냐에 있습니다.

가상머신 기반 가상화 기술은 각 가상 머신이 별도의 OS를 가지고 있어 하드웨어 자원을 제외하면 완전히 분리되어 있는 반면,
컨테이너 기반 가상화 기술은 모든 컨테이너가 OS를 공유하고 있습니다.

즉 컨테이너 기반 가상화는 아무리 많은 컨테이너를 동시에 실행 시키더라도 하나의 OS를 사용하기 때문에,
실행시간 측면이나 용량 측면에서 가상머신 기반 가상화에 비해 훨씬 가볍고 빠르다는 특징을 가지고 있습니다.
이 때문에 2010년대 후반들어 컨테이너 기반 가상화가 매우 빠르게 확산되고 있습니다.

그러나 모든 기술에 명과 암이 있듯이, 가볍고 빠른 컨테이너 기반 가상화 기술에도 단점은 있습니다.
같은 OS를 모든 컨테이너가 공유한다는 점은 성능 측면에서는 분명한 이점이 되지만,
보안 측면에서는 공유하는 OS가 취약점에 노출될 경우 가상 머신 기반 가상화에 비해 쉽게 공격받을 수 있다는 문제가 있습니다.

본 연구는 이러한 컨테이너 기반 가상화의 보안성 측면에 초점을 맞추었습니다.

본 연구의 목표는 컨테이너 기반 가상화 기술의 특성상 발생하는 새로운 가상화 위협 모델을 살펴보고,
이러한 위협 모델을 방어하기 위한 최근 보안 기술 동향을 살펴보는 것입니다.

네, 서론이 길었습니다.

본 연구에서 컨테이너 보안의 위협 모델은 크게 두 가지로 나누었습니다.
첫째는 내가 특정한 컨테이너에 대한 권한만 있는 사용자인데, 컨테이너가 실행되는 호스트 OS를 신뢰할 수 없는 경우이고,
둘째는 내가 호스트 OS에 대한 권한이 있는 상태에서, 특정 컨테이너의 사용자가 악의적 의도를 가지고 컨테이너 외부를 공격하려는 경우입니다.

첫번째의 위협 모델은 다양한 환경에서 발생할 수 있습니다.
사용자가 신뢰할 수 없는 서드파티 클라우드 서비스(아마존, 마이크로소프트)를 사용하는 경우에도 발생할 수 있고,
신뢰할 수 있는 클라우드 서비스를 사용하는 경우라도, 외부 공격자에 의해 호스트 OS가 침해되었을 때에 발생할 수 있습니다.

이러한 위협 모델에서는 공격자가 컨테이너에 대해 어떠한 오퍼레이션이든 수행할 수 있기 때문에,
컨테이너의 동작을 정지시킨다던가 하는 식의 공격에 대해서는 방어가 불가능합니다.
컨테이너 내부의 코드와 데이터를 보호하는 것이 가능한 최선의 보안입니다.

이 때 공격자는 소프트웨어적으로 무한한 권한을 가지고 있는 것이기 때문에,
소프트웨어적인 기법 만으로는 컨테이너의 데이터 보호가 어렵습니다.

따라서 나온 아이디어가 인텔 SGX를 이용하여 하드웨어의 도움을 받아 컨테이너의 데이터를 암호화하는 것입니다.
SGX(Software Guard eXtension)은 인텔의 6세대 이후 CPU에서 지원되는 특수한 명령어인데요.
CPU 내부에 저장되는 암호화 키를 이용해서 메모리 상에 암호화된 공간인 엔클레이브(enclave)를 만들고,
엔클레이브에 보호할 데이터를 저장하는 기술입니다.
암호화된 데이터의 복호화 키는 CPU에 저장되어 있으므로, OS가 키를 알아내어 데이터를 복호화하는 것이 불가능합니다.

Arnautov 는 이러한 SGX 기술을 이용해서 컨테이너 전체를 엔클레이브에 저장하는 SCONE 아키텍처를 제안했습니다.
컨테이너를 엔클레이브에 실행할 때 발생하는 가장 큰 문제는,
프로세스가 OS가 관장하는 시스템 콜을 실행하기 위해서는 엔클레이브에서 벗어나야 한다는 부분입니다.
OS를 신뢰할 수 없기에 엔클레이브 내에서 시스템 콜을 실행할 수 없는데, 엔클레이브 외부와 내부를 전환하는 과정에서 꽤나 큰 성능 문제가 발생합니다.
이러한 문제를 개선하기 위해서 SCONE 아키텍처는 M:N 스레드 모델과 비동기 시스템 콜을 제시합니다.
M:N 스레드 모델은 N개의 OS 커널 스레드와 구분되는 M개의 유저 스레드를 엔클레이브 내에서 실행하여,
특정 스레드가 시스템 콜을 실행하여 지연이 발생할 때, 다른 스레드가 진행되도록 하는 기술이고, 
비동기 시스템 콜은 시스템 콜이 실행되는 동안 엔클레이브 내부 스레드가 종료되지 않도록 비동기적으로 시스템 콜을 실행시키는 기술입니다.

SCONE은 컨테이너 환경에서 운용되는 대표적인 애플리케이션인 Apache, Redis, Memcached, NGINX에서 실험을 수행했고,
SGX와 SCONE을 사용하지 않았을 때에 비해 최소 0.6배의 스루풋을 달성했다고 합니다.
결과에서 주목해볼만한 것은 싱글스레드 환경에서 운용되는 Redis의 경우 0.6배의 스루풋,
멀티 스레드 활용이 가능한 다른 애플리케이션은 최소 0.8배에서 오히려 더 나은 1.2배의 스루풋을 보이는 경우도 있었다고 합니다.

다음은 두번째 위협 모델입니다.
두번째 위협 모델은 우리가 호스트 OS에 대한 권한이 있고, 악의적인 공격자가 특정한 컨테이너 내부에 대한 권한이 있는 상태에서,
컨테이너 영역을 벗어나 컨테이너 외부를 공격하려고 하는 경우입니다.

이러한 위협모델도 흔하게 발생할 수 있습니다. 클라우드 컴퓨팅 환경에서는 다양한 사용자가 각자의 컨테이너를 이용하여 작업을 하게 되는데요.
이 중 특정 사용자의 장치가 외부 공격자에 노출되어 공격자가 해당 사용자의 컨테이너에 접근할 수 있습니다.

이 위협 모델에서는 추가적으로 OS 커널에 취약점이 존재해서, 컨테이너 내부에서 이러한 취약점을 이용해서 컨테이너 외부의 권한을 취득할 수 있다고 가정합니다.
예를 들어, 어떤 시스템 콜에서 버퍼 오버플로우 취약점이 존재해서, OS 커널 영역에서 공격자가 원하는 코드를 실행할 수 있다면 이러한 문제가 발생할 수 있습니다.

이 경우, 공격자는 컨테이너에 지정된 namespace를 외부의 호스트 OS와 같은 namespace로 변경함을 통해서 OS의 격리 기법을 우회하여 호스트 OS에 접근이 가능하게 됩니다.

Jian은 이러한 컨테이너 탈출 공격을 방어하기 위하여 namespace 변화를 감지하는 기법을 제안합니다.
컨테이너의 namespace는 각 컨테이너를 다른 컨테이너 및 호스트 OS과 구분하기 위하여 처음 컨테이너가 생성될때에 지정되는 값이기 때문에,
컨테이너 실행 중에 변화하지 않습니다.
Jian은 이에 착안해 호스트 OS에서 처음 컨테이너가 생성될 때에 namespace를 모두 기록해두고, 컨테이너가 실행되는 동안 namespace의 변화를 관찰하여,
namespace가 변화되는 것을 감지되는 경우 컨테이너를 kill하는 모듈을 제안하였습니다.

본 모듈을 사용한 실험에서 Jian은 대표적인 커널 취약점인 CVE-2014-0038과 CVE-2016-0을 통해 발생하는 컨테이너 탈출 공격을 방어할 수 있다는 것을 보였습니다.

---

컨테이너 기반 가상화 기술을 사용하는 환경에서 발생할 수 있는 두 가지 위협과 위협을 방어하는 보안 기술동향을 말씀드렸습니다.

컨테이너 기반 가상화 기술은 가상머신 기반 가상화 기술에 비해 압도적인 이점을 많이 가지고 있고,
그렇기에 앞으로 더 널리 사용될 것이라고 생각됩니다.

그러나 모든 컨테이너가 같은 OS를 공유한다는 근본적인 특성상 컨테이너 기반 가상화는 다양한 보안 위협에 끊임없이 노출될 수밖에 없습니다.
따라서 여러 위협으로부터 컨테이너를 보호하는 것이 앞으로 가상화 기술 보안의 주요한 화두가 될 것으로 생각합니다.

감사합니다.











